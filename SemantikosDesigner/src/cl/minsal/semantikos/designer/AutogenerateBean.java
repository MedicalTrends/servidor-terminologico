package cl.minsal.semantikos.designer;

import cl.minsal.semantikos.category.CategoryBean;
import cl.minsal.semantikos.clients.ServiceLocator;
import cl.minsal.semantikos.kernel.components.RelationshipManager;
import cl.minsal.semantikos.kernel.componentsweb.ViewAugmenter;
import cl.minsal.semantikos.messages.MessageBean;
import cl.minsal.semantikos.model.ConceptSMTK;
import cl.minsal.semantikos.model.crossmaps.CrossmapSet;
import cl.minsal.semantikos.model.exceptions.BusinessRuleException;
import cl.minsal.semantikos.model.helpertables.HelperTableRow;
import cl.minsal.semantikos.model.relationships.Relationship;
import cl.minsal.semantikos.model.relationships.RelationshipAttribute;
import cl.minsal.semantikos.model.relationships.RelationshipDefinition;
import cl.minsal.semantikos.modelweb.ConceptSMTKWeb;
import cl.minsal.semantikos.modelweb.RelationshipDefinitionWeb;
import cl.minsal.semantikos.modelweb.RelationshipWeb;
import cl.minsal.semantikos.util.StringUtils;

import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import java.sql.BatchUpdateException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Created by des01c7 on 14-10-16.
 */
@ManagedBean(name = "autogenerateBean")
@ViewScoped
public class AutogenerateBean {

    //@EJB
    RelationshipManager relationshipManager = (RelationshipManager) ServiceLocator.getInstance().getService(RelationshipManager.class);

    @ManagedProperty( value="#{categoryBean}")
    CategoryBean categoryBean;

    @ManagedProperty(value = "#{messageBean}")
    MessageBean messageBean;

    public MessageBean getMessageBean() {
        return messageBean;
    }

    public void setMessageBean(MessageBean messageBean) {
        this.messageBean = messageBean;
    }

    public CategoryBean getCategoryBean() {
        return categoryBean;
    }

    public void setCategoryBean(CategoryBean categoryBean) {
        this.categoryBean = categoryBean;
    }

    public void load(ConceptSMTKWeb concept, RelationshipDefinition relationshipDefinition) {

        if(concept.isModeled()) {
            return;
        }

        if(!categoryBean.getRelationshipDefinitionById(concept.getCategory(), relationshipDefinition).isAutogenerate()) {
            return;
        }

        String autogeneratedTerm = autogenerate(concept, categoryBean.getRelationshipDefinitionsByCategory(concept.getCategory()));
        concept.getValidDescriptionFavorite().setTerm(autogeneratedTerm);
        concept.getValidDescriptionFSN().setTerm(autogeneratedTerm);

    }

    public String autogenerate(ConceptSMTKWeb concept, List<RelationshipDefinitionWeb> relationshipDefinitionWebs) {
        String separator = "";
        String autogeneratedTerm = "";
        // Se asume que las definiciones est√°n ordenadas de acuerdo a negocio
        for (RelationshipDefinitionWeb relationshipDefinition : relationshipDefinitionWebs) {
            if(relationshipDefinition.isAutogenerate()) {
                List<RelationshipWeb> autogenerableRelationships = concept.getValidRelationshipsWebByRelationDefinition(relationshipDefinition);
                if (!autogenerableRelationships.isEmpty()) {
                    if (relationshipDefinition.getTargetDefinition().isHelperTable() || relationshipDefinition.getTargetDefinition().isBasicType()) {
                        separator = " ";
                    } else {
                        if(relationshipDefinition.isMCCE()) {
                            separator = " ";
                        }
                        else {
                            separator = " + ";
                        }
                    }
                }
                Collections.sort(autogenerableRelationships);
                for (Relationship relationship : autogenerableRelationships) {
                    autogeneratedTerm = autogeneratedTerm + separator + autogenerate(relationship);
                }
            }
        }
        if(!autogeneratedTerm.isEmpty()) {
            autogeneratedTerm = StringUtils.normalizeSpaces(autogeneratedTerm).trim();
            if(autogeneratedTerm.charAt(0) == '+') {
                autogeneratedTerm = autogeneratedTerm.substring(1).trim();
            }
        }
        return autogeneratedTerm;
    }

    public String autogenerate(Relationship relationship) {

        String autogeneratedTerm = "";

        if(relationship.getRelationshipDefinition().getTargetDefinition().isSMTKType()) {

            ConceptSMTK concept = (ConceptSMTK) relationship.getTarget();

            if(relationship.getRelationshipDefinition().isMCCE()) {
                concept.setRelationships(relationshipManager.getRelationshipsBySourceConcept(concept));
                List<RelationshipDefinitionWeb> relationshipDefinitionWebs = new ArrayList<>();

                for (RelationshipDefinitionWeb relationshipDefinitionWeb : categoryBean.getRelationshipDefinitionsByCategory(concept.getCategory())) {
                    if(!relationshipDefinitionWeb.getTargetDefinition().isSMTKType()) {
                        relationshipDefinitionWebs.add(relationshipDefinitionWeb);
                    }
                }

                autogeneratedTerm = autogeneratedTerm + autogenerate(new ConceptSMTKWeb(concept), relationshipDefinitionWebs);
            }
            else {
                autogeneratedTerm = concept.getDescriptionFavorite().getTerm();
            }

            if(!relationship.getRelationshipAttributes().isEmpty()) {
                autogeneratedTerm = autogeneratedTerm + " ";
            }

            autogeneratedTerm = autogeneratedTerm + autogenerateAttributes(relationship);
        }

        if(relationship.getRelationshipDefinition().getTargetDefinition().isHelperTable()) {
            HelperTableRow helperTableRow = (HelperTableRow) relationship.getTarget();
            autogeneratedTerm = helperTableRow.getDescription();
        }

        if(relationship.getRelationshipDefinition().getTargetDefinition().isBasicType()) {
            autogeneratedTerm = relationship.getTarget().toString();

            if(!relationship.getRelationshipAttributes().isEmpty()) {
                autogeneratedTerm = autogeneratedTerm + " ";
            }

            autogeneratedTerm = autogeneratedTerm + autogenerateAttributes(relationship);
        }

        if(relationship.getRelationshipDefinition().getTargetDefinition().isCrossMapType()) {
            autogeneratedTerm = relationship.getTarget().toString();
        }

        return autogeneratedTerm;

    }

    public String autogenerateAttributes(Relationship relationship) {

        String autogeneratedTerm = "";

        for (RelationshipAttribute relationshipAttribute : relationship.getRelationshipAttributes()) {

            if(relationshipAttribute.getRelationAttributeDefinition().isOrderAttribute()) {
                continue;
            }

            if(relationshipAttribute.getRelationAttributeDefinition().isUnidadPotenciaAttribute() ||
                    relationshipAttribute.getRelationAttributeDefinition().isUnidadPPAttribute() ||
                    relationshipAttribute.getRelationAttributeDefinition().isUnidadAttribute() ||
                    relationshipAttribute.getRelationAttributeDefinition().isUnidadPackMultiAttribute() ||
                    relationshipAttribute.getRelationAttributeDefinition().isUnidadVolumenTotalAttribute()) {

                HelperTableRow helperTableRow = (HelperTableRow) relationshipAttribute.getTarget();
                autogeneratedTerm = autogeneratedTerm + helperTableRow.getCellByColumnName("descripcion abreviada").getStringValue() + " ";

                if(relationshipAttribute.getRelationAttributeDefinition().isUnidadPotenciaAttribute()) {
                    autogeneratedTerm = autogeneratedTerm + " / ";
                }
            }
            else {
                autogeneratedTerm = autogeneratedTerm + relationshipAttribute.getTarget().toString() + " ";
            }
        }

        return autogeneratedTerm;
    }

    public boolean canInheritDirectCrossmaps(ConceptSMTK concept) {

        for (Relationship relationship : concept.getRelationships()) {
            if(relationship.getRelationshipDefinition().getTargetDefinition().isSMTKType()) {
                ConceptSMTK targetConcept = (ConceptSMTK) relationship.getTarget();
                if(!targetConcept.isRelationshipsLoaded()) {
                    targetConcept.setRelationships(relationshipManager.getRelationshipsBySourceConcept(targetConcept));
                }
                for (Relationship targetRelationship : targetConcept.getRelationships()) {
                    if(targetRelationship.getRelationshipDefinition().getTargetDefinition().isCrossMapType()) {
                        if(targetRelationship.getRelationshipDefinition().isGMDN()) {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

    public List<Relationship> getHeritableDirectCrossmaps(ConceptSMTK concept) {

        List<Relationship> directCrossmaps = new ArrayList<>();

        for (Relationship relationship : concept.getRelationships()) {
            if(relationship.getRelationshipDefinition().getTargetDefinition().isSMTKType()) {
                ConceptSMTK targetConcept = (ConceptSMTK) relationship.getTarget();
                if(!targetConcept.isRelationshipsLoaded()) {
                    targetConcept.setRelationships(relationshipManager.getRelationshipsBySourceConcept(targetConcept));
                }
                for (Relationship targetRelationship : targetConcept.getRelationships()) {
                    if(targetRelationship.getRelationshipDefinition().getTargetDefinition().isCrossMapType()) {
                        if(targetRelationship.getRelationshipDefinition().isGMDN()) {
                            directCrossmaps.add(targetRelationship);
                        }
                    }
                }
            }
        }

        return directCrossmaps;
    }

    public void inheritDirectCrossmaps(ConceptSMTKWeb concept) throws BusinessRuleException {

        List<RelationshipWeb> directCrossmaps = new ArrayList<>();

        try {

            for (Relationship relationship : concept.getRelationships()) {
                if(relationship.getRelationshipDefinition().getTargetDefinition().isSMTKType()) {
                    ConceptSMTK targetConcept = (ConceptSMTK) relationship.getTarget();
                    if(!targetConcept.isRelationshipsLoaded()) {
                        targetConcept.setRelationships(relationshipManager.getRelationshipsBySourceConcept(targetConcept));
                    }
                    for (Relationship targetRelationship : targetConcept.getRelationships()) {
                        if(targetRelationship.getRelationshipDefinition().getTargetDefinition().isCrossMapType()) {
                            if(targetRelationship.getRelationshipDefinition().isGMDN()) {
                                directCrossmaps.add(new RelationshipWeb(targetRelationship, targetRelationship.getRelationshipAttributes()));
                            }
                        }
                    }
                }
            }

            for (RelationshipWeb directCrossmap : directCrossmaps) {
                concept.addRelationshipWeb(directCrossmap);
            }

        }
        catch(BusinessRuleException e) {
            messageBean.messageError(e.getMessage());
        }
    }

}
