package cl.minsal.semantikos.loaders;

import cl.minsal.semantikos.clients.RemoteEJBClientFactory;
import cl.minsal.semantikos.kernel.components.ConceptManager;
import cl.minsal.semantikos.kernel.components.HelperTablesManager;
import cl.minsal.semantikos.kernel.components.SnomedCTManager;
import cl.minsal.semantikos.kernel.components.TagManager;
import cl.minsal.semantikos.model.ConceptSMTK;
import cl.minsal.semantikos.model.LoadException;
import cl.minsal.semantikos.model.LoadLog;
import cl.minsal.semantikos.model.SMTKLoader;
import cl.minsal.semantikos.model.basictypes.BasicTypeValue;
import cl.minsal.semantikos.model.categories.Category;
import cl.minsal.semantikos.model.categories.CategoryFactory;
import cl.minsal.semantikos.model.descriptions.Description;
import cl.minsal.semantikos.model.descriptions.DescriptionType;
import cl.minsal.semantikos.model.helpertables.HelperTable;
import cl.minsal.semantikos.model.helpertables.HelperTableRow;
import cl.minsal.semantikos.model.relationships.*;
import cl.minsal.semantikos.model.snomedct.ConceptSCT;
import cl.minsal.semantikos.model.tags.TagSMTK;
import cl.minsal.semantikos.model.tags.TagSMTKFactory;
import cl.minsal.semantikos.model.users.User;
import cl.minsal.semantikos.util.StringUtils;

import java.util.*;

import static cl.minsal.semantikos.model.LoadLog.ERROR;
import static cl.minsal.semantikos.model.LoadLog.INFO;
import static cl.minsal.semantikos.model.relationships.SnomedCTRelationship.ES_UN;

/**
 * Created by root on 15-06-17.
 */
public class MCCEConceptLoader extends EntityLoader {

    ConceptManager conceptManager = (ConceptManager) RemoteEJBClientFactory.getInstance().getManager(ConceptManager.class);
    TagManager tagManager = (TagManager) RemoteEJBClientFactory.getInstance().getManager(TagManager.class);
    SnomedCTManager snomedCTManager = (SnomedCTManager) RemoteEJBClientFactory.getInstance().getManager(SnomedCTManager.class);
    HelperTablesManager helperTableManager = (HelperTablesManager) RemoteEJBClientFactory.getInstance().getManager(HelperTablesManager.class);

    public static final Map<String, Integer> mcceConceptFields;
    static
    {
        mcceConceptFields = new HashMap<String, Integer>();
        mcceConceptFields.put("CONCEPTO_ID", 0);
        mcceConceptFields.put("DESCRIPCION", 1);
        mcceConceptFields.put("DESC_ABREVIADA", 2);
        mcceConceptFields.put("ESTADO", 3);
        mcceConceptFields.put("SENSIBLE_MAYUSCULA", 4);
        mcceConceptFields.put("CREAC_NOMBRE", 5);
        mcceConceptFields.put("REVISADO", 6);
        mcceConceptFields.put("CONSULTAR", 7);
        mcceConceptFields.put("SCT_ID", 8);
        mcceConceptFields.put("SCT_TERMINO", 9);
        mcceConceptFields.put("SINONIMO", 10);
        mcceConceptFields.put("GRUPOS_JERARQUICOS", 11);
        mcceConceptFields.put("MEDICAMENTO_CLINICO_FK", 15);
        mcceConceptFields.put("MEDICAMENTO_CLINICO_DESC", 16);
        mcceConceptFields.put("TIPO_FK", 17);
        mcceConceptFields.put("TIPO_DESC", 18);
        mcceConceptFields.put("CANTIDAD", 19);
        mcceConceptFields.put("UNIDAD_MEDIDA_CANTIDAD_FK", 20);
        mcceConceptFields.put("UNIDAD_MEDIDA_CANTIDAD_DESC", 21);
        mcceConceptFields.put("PACK_MULTI_CANTIDAD", 22);
        mcceConceptFields.put("PACK_MULTI_UNIDAD_FK", 23);
        mcceConceptFields.put("PACK_MULTI_UNIDAD_DESC", 24);
        mcceConceptFields.put("VOLUMEN_TOTAL_CANTIDAD", 25);
        mcceConceptFields.put("VOLUMEN_TOTAL_UNIDAD_FK", 26);
        mcceConceptFields.put("VOLUMEN_TOTAL_UNIDAD_DESC", 27);
    }

    Map<Long, ConceptSMTK> conceptSMTKMap = new HashMap<>();

    public void loadConceptFromFileLine(String line, User user) throws LoadException {

        String[] tokens = line.split(separator);
        long id = Long.parseLong(tokens[mcceConceptFields.get("CONCEPTO_ID")]);

        try {

            /*Recuperando datos Concepto*/

            /*Se recuperan los datos relevantes. El resto serán calculados por el componente de negocio*/
            boolean toBeReviewed = tokens[mcceConceptFields.get("REVISADO")].equals("Si");
            boolean toBeConsulted = tokens[mcceConceptFields.get("CONSULTAR")].equals("Si");
            boolean autogenerated = tokens[mcceConceptFields.get("CREAC_NOMBRE")].equals("Autogenerado");

            Category category = CategoryFactory.getInstance().findCategoryByName("Fármacos - Medicamento Clínico");
            TagSMTK tagSMTK = TagSMTKFactory.getInstance().findTagSMTKByName("producto");

            ConceptSMTK conceptSMTK = new ConceptSMTK(category);
            conceptSMTK.setToBeConsulted(toBeConsulted);
            conceptSMTK.setToBeReviewed(toBeReviewed);
            conceptSMTK.setCategory(category);
            conceptSMTK.setTagSMTK(tagSMTK);

            /*Recuperando datos Descripciones*/

            /*Recuperando descripcion preferida*/
            String term = StringUtils.normalizeSpaces(tokens[mcceConceptFields.get("DESCRIPCION")]);
            boolean caseSensitive = tokens[mcceConceptFields.get("SENSIBLE_MAYUSCULA")].equals("Sensible");
            DescriptionType descriptionType = DescriptionType.PREFERIDA;

            Description descriptionFavourite = new Description(conceptSMTK, term, descriptionType);
            descriptionFavourite.setCaseSensitive(caseSensitive);
            descriptionFavourite.setCreatorUser(user);
            descriptionFavourite.setAutogeneratedName(autogenerated);

            conceptSMTK.addDescription(descriptionFavourite);

            /*Recuperando descripcion FSN*/
            term = descriptionFavourite.getTerm()+" ("+tagSMTK.getName()+")";
            descriptionType = DescriptionType.FSN;

            Description descriptionFSN = new Description(conceptSMTK, term, descriptionType);
            descriptionFSN.setCaseSensitive(caseSensitive);
            descriptionFSN.setCreatorUser(user);
            descriptionFSN.setAutogeneratedName(autogenerated);

            conceptSMTK.addDescription(descriptionFSN);

            /*Recuperando descripcion Abreviada*/
            term = StringUtils.normalizeSpaces(tokens[mcceConceptFields.get("DESC_ABREVIADA")]);

            if(!StringUtils.isEmpty(term)) {
                descriptionType = DescriptionType.ABREVIADA;

                Description descriptionAbbreviated = new Description(conceptSMTK, term, descriptionType);
                descriptionAbbreviated.setCaseSensitive(caseSensitive);
                descriptionAbbreviated.setCreatorUser(user);
                descriptionAbbreviated.setAutogeneratedName(autogenerated);

                conceptSMTK.addDescription(descriptionAbbreviated);
            }

            /*Recuperando Sinónimos*/
            String synonyms = tokens[mcceConceptFields.get("SINONIMO")];
            descriptionType = DescriptionType.SYNONYMOUS;

            String[] synonymsTokens = synonyms.split("\n");

            for (String synonymsToken : synonymsTokens) {
                term = StringUtils.normalizeSpaces(synonymsToken.split("-")[1]);

                Description description = new Description(conceptSMTK, term, descriptionType);
                description.setCaseSensitive(caseSensitive);
                description.setCreatorUser(user);
                description.setAutogeneratedName(autogenerated);

                conceptSMTK.addDescription(description);
            }

            /*Recuperando datos Relaciones*/
            String idConceptSCTName = tokens[mcceConceptFields.get("SCT_ID")];

            /*Por defecto se mapea a un concepto SNOMED Genérico*/
            long idConceptSCT = 373873005;

            if(!idConceptSCTName.isEmpty()) {
                idConceptSCT = Long.parseLong(tokens[mcceConceptFields.get("SCT_ID")]);
            }

            String relationshipType = ES_UN;

            ConceptSCT conceptSCT = snomedCTManager.getConceptByID(idConceptSCT);

            if(conceptSCT == null) {
                throw new LoadException(path.toString(), id, "Relación referencia a concepto SCT inexistente", ERROR);
            }

            /**Se obtiene la definición de relacion SNOMED CT**/
            RelationshipDefinition relationshipDefinition = RelationshipDefinitionFactory.getInstance().findRelationshipDefinitionByName(TargetDefinition.SNOMED_CT);

            RelationshipAttributeDefinition attDef;

            RelationshipAttribute ra;

            Relationship relationshipSnomed = new Relationship(conceptSMTK, conceptSCT, relationshipDefinition, new ArrayList<RelationshipAttribute>(), null);

            /**Para esta definición, se obtiente el atributo tipo de relación**/
            for (RelationshipAttributeDefinition attDef1 : relationshipDefinition.getRelationshipAttributeDefinitions()) {

                if (attDef1.isRelationshipTypeAttribute()) {
                    HelperTable helperTable = (HelperTable) attDef1.getTargetDefinition();

                    List<HelperTableRow> relationshipTypes = helperTableManager.searchRows(helperTable, relationshipType);

                    if (relationshipTypes.size() == 0) {
                        throw new LoadException(path.toString(), id, "No existe un tipo de relación de nombre: "+relationshipType, ERROR);
                    }

                    ra = new RelationshipAttribute(attDef1, relationshipSnomed, relationshipTypes.get(0));
                    relationshipSnomed.getRelationshipAttributes().add(ra);
                }
            }

            conceptSMTK.addRelationship(relationshipSnomed);

            HelperTable helperTable;

            /*Generando Comercializado*/
            BasicTypeValue basicTypeValue = new BasicTypeValue(true);

            relationshipDefinition = RelationshipDefinitionFactory.getInstance().findRelationshipDefinitionByName(TargetDefinition.COMERCIALIZADO);

            Relationship relationshipMarketed = new Relationship(conceptSMTK, basicTypeValue, relationshipDefinition, new ArrayList<RelationshipAttribute>(), null);

            conceptSMTK.addRelationship(relationshipMarketed);

            /*Recuperando Medicamento Básico*/

            String mbName = tokens[mcceConceptFields.get("MEDICAMENTO_BASICO_DESC")];

            if(!StringUtils.isEmpty(mbName)) {

                relationshipDefinition = category.findRelationshipDefinitionsByName("Estado Prescripción").get(0);

                List<ConceptSMTK> mb = conceptManager.findConceptsBy(mbName);

                if(mb.isEmpty()) {
                    throw new LoadException(path.toString(), id, "No existe un Medicamento Básico con preferida: "+mbName, ERROR);
                }

                Relationship relationshipMB = new Relationship(conceptSMTK, mb.get(0), relationshipDefinition, new ArrayList<RelationshipAttribute>(), null);

                conceptSMTK.addRelationship(relationshipMB);
            }

            /*Recuperando Volumen Total*/

            String volumeName = tokens[mcceConceptFields.get("VOLUMEN_TOTAL_CANTIDAD")];

            if(!volumeName.isEmpty()) {

                relationshipDefinition = category.findRelationshipDefinitionsByName("Cantidad de Volumen Total").get(0);

                basicTypeValue = new BasicTypeValue(new Integer(volumeName.replace(",",".")));

                Relationship relationshipVolume = new Relationship(conceptSMTK, basicTypeValue, relationshipDefinition, new ArrayList<RelationshipAttribute>(), null);

                //Unidad Volumen
                attDef = relationshipDefinition.findRelationshipAttributeDefinitionsByName("Unidad de Volumen").get(0);

                String volumeUnitName = tokens[mcceConceptFields.get("VOLUMEN_TOTAL_UNIDAD_DESC")];

                helperTable = (HelperTable) attDef.getTargetDefinition();

                List<HelperTableRow> volumneUnit = helperTableManager.searchRows(helperTable, volumeUnitName);

                ra = new RelationshipAttribute(attDef, relationshipVolume, volumneUnit.get(0));
                relationshipVolume.getRelationshipAttributes().add(ra);

                conceptSMTK.addRelationship(relationshipVolume);
            }



            conceptSMTKMap.put(id, conceptSMTK);
        }
        catch (Exception e) {
            throw new LoadException(path.toString(), id, "Error desconocido: "+e.toString(), ERROR);
        }

    }

    public void loadAllConcepts(SMTKLoader smtkLoader) {

        smtkLoader.logInfo(new LoadLog("Comprobando Conceptos Básicos", INFO));

        try {

            initReader(smtkLoader.MC_PATH);

            String line;

            while ((line = reader.readLine()) != null) {
                try {
                    loadConceptFromFileLine(line, smtkLoader.getUser());
                }
                catch (LoadException e) {
                    smtkLoader.logError(e);
                    e.printStackTrace();
                }
            }

            haltReader();

            smtkLoader.logTick();

        } catch (Exception e) {
            smtkLoader.logError(new LoadException(path.toString(), null, e.getMessage(), ERROR));
            e.printStackTrace();
        }
    }

    public void persistAllConcepts(SMTKLoader smtkLoader) {

        smtkLoader.logInfo(new LoadLog("Persisitiendo Conceptos Fármacos - Sustancia", INFO));

        Iterator it = conceptSMTKMap.entrySet().iterator();

        while (it.hasNext()) {

            Map.Entry pair = (Map.Entry) it.next();

            try {
                conceptManager.persist((ConceptSMTK)pair.getValue(), smtkLoader.getUser());
            }
            catch (Exception e) {
                smtkLoader.logError(new LoadException(path.toString(), (Long) pair.getKey(), e.getMessage(), ERROR));
                e.printStackTrace();
            }

            it.remove(); // avoids a ConcurrentModificationException
        }
    }

    public void processConcepts(SMTKLoader smtkLoader) {
        loadAllConcepts(smtkLoader);
        persistAllConcepts(smtkLoader);
    }

}
