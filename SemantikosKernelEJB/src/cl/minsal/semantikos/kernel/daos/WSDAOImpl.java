package cl.minsal.semantikos.kernel.daos;

import cl.minsal.semantikos.kernel.util.StringUtils;
import cl.minsal.semantikos.model.ConceptSMTK;
import cl.minsal.semantikos.model.descriptions.*;
import cl.minsal.semantikos.model.dtos.DescriptionDTO;
import cl.minsal.semantikos.model.users.User;
import cl.minsal.semantikos.model.users.UserFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleTypes;
import oracle.sql.CLOB;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Resource;
import javax.ejb.*;
import javax.sql.DataSource;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.sql.*;
import java.util.*;
import java.util.concurrent.Future;

import static cl.minsal.semantikos.model.DAO.NON_PERSISTED_ID;
import static java.lang.System.currentTimeMillis;
import static java.sql.Types.TIMESTAMP;

/**
 * @author Andres Farias.
 */
@Stateless
@org.jboss.ejb3.annotation.Pool(value="heavy-load-pool")
public class WSDAOImpl implements WSDAO {

    /** El logger para esta clase */
    private static final Logger logger = LoggerFactory.getLogger(WSDAOImpl.class);

    @Resource(lookup = "java:jboss/OracleDS")
    private DataSource dataSource;

    private ObjectMapper mapper = new ObjectMapper();

    @Override
    public List<Description> searchDescriptionsPerfectMatch(String term, Long[] categories, Long[] refsets, int page, int pageSize) throws IOException {

        /* Se registra el tiempo de inicio */
        //long init = currentTimeMillis();

        List<Description> descriptions = new ArrayList<>();

        List<DescriptionDTO> descriptionsDTO = new ArrayList<>();

        String sql = "begin ? := stk.stk_pck_ws.search_descriptions_perfect_match_json(?,?,?,?,?); end;";

        try (Connection connection = dataSource.getConnection();
             CallableStatement call = connection.prepareCall(sql)) {

            //call.registerOutParameter (1, Types.VARCHAR);
            call.registerOutParameter (1, Types.CLOB);
            call.setString(2, term.toLowerCase());

            if(categories == null) {
                call.setNull(3, Types.ARRAY, "STK.NUMBER_ARRAY");
            }
            else {
                call.setArray(3, connection.unwrap(OracleConnection.class).createARRAY("STK.NUMBER_ARRAY", categories));
            }
            if(refsets == null) {
                call.setNull(4, Types.ARRAY, "STK.NUMBER_ARRAY");
            }
            else {
                call.setArray(4, connection.unwrap(OracleConnection.class).createARRAY("STK.NUMBER_ARRAY", refsets));
            }

            call.setInt(5, page);

            call.setInt(6, pageSize);

            call.setFetchSize(100);

            call.execute();

            //String json = (String) call.getObject(1);
            Clob json = (Clob) call.getObject(1);

            // Read CLOB data from CLOB locator into Input ASCII character stream
            InputStream asciiChar_stream = json.getAsciiStream();
            StringWriter w = new StringWriter();
            IOUtils.copy(asciiChar_stream, w, "UTF-8");
            String clobAsString = w.toString();

            String jsoncito = "{\"id\":38421,\"conceptID\":\"384211000167104\",\"idCategory\":24,\"modeled\":1,\"toBeReviewed\":0,\"toBeConsulted\":0,\"fullyDefined\":0,\"inherited\":0,\"published\":0,\"observation\":null,\"idTagSMTK\":16,\"descriptionsDTO\":[]}";

            String jsoncito2 = "[{\"id\":66225,\"descriptionId\":\"662251000167119\",\"idDescriptionType\":3,\"term\":\"obs tap�n cerumen\",\"caseSensitive\":0,\"autogeneratedName\":0,\"published\":0,\"validityUntil\":null,\"conceptDTO\":null,\"uses\":0,\"user\":null,\"creationDate\":\"2017-07-25T10:55:20.922000\",\"modeled\":0}\u0000,{\"id\":66226,\"descriptionId\":\"662261000167116\",\"idDescriptionType\":2,\"term\":\"sospecha de cerumen impactado en el o�do\",\"caseSensitive\":0,\"autogeneratedName\":0,\"published\":0,\"validityUntil\":null,\"conceptDTO\":null,\"uses\":0,\"user\":null,\"creationDate\":\"2017-07-25T10:55:20.922000\",\"modeled\":0}\u0000,{\"id\":66227,\"descriptionId\":\"662271000167110\",\"idDescriptionType\":1,\"term\":\"sospecha de cerumen impactado en el o�do (situaci�n)\",\"caseSensitive\":0,\"autogeneratedName\":0,\"published\":0,\"validityUntil\":null,\"conceptDTO\":null,\"uses\":0,\"user\":null,\"creationDate\":\"2017-07-25T10:55:20.922000\",\"modeled\":0}]";

            descriptionsDTO = Arrays.asList(mapper.readValue(clobAsString, DescriptionDTO[].class));

        } catch (SQLException e) {
            String errorMsg = "Error al recuperar descripciones de la BDD.";
            logger.error(errorMsg, e);
            throw new EJBException(e);
        }

        //float time = (float) (currentTimeMillis() - init);

        //logger.info("ws-req-001: {}s", String.format("%.2f", time));

        //logger.info("searchDescriptionsByTerm(" + term + ", " + categories + ", " + refsets + "): " + descriptions);
        //logger.info("searchDescriptionsByTerm(" + term + ", " + categories + ", " + refsets + "): {}s", String.format("%.2f", (currentTimeMillis() - init)/1000.0));
        return descriptions;
    }




}
