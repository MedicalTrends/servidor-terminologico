package cl.minsal.semantikos.kernel.daos.mappers;

import cl.minsal.semantikos.kernel.components.AuditManager;
import cl.minsal.semantikos.kernel.components.CategoryManager;
import cl.minsal.semantikos.kernel.daos.AuthDAO;
import cl.minsal.semantikos.kernel.daos.ConceptDAO;
import cl.minsal.semantikos.kernel.daos.DescriptionDAO;
import cl.minsal.semantikos.model.ConceptSMTK;
import cl.minsal.semantikos.model.descriptions.*;
import cl.minsal.semantikos.model.helpertables.HelperTable;
import cl.minsal.semantikos.model.helpertables.HelperTableColumnFactory;
import cl.minsal.semantikos.model.users.User;
import cl.minsal.semantikos.model.users.UserFactory;

import javax.ejb.EJB;
import javax.ejb.Singleton;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import java.util.Map;

/**
 * Created by root on 28-06-17.
 */
@Singleton
public class DescriptionMapper {

    @EJB
    ConceptDAO conceptDAO;

    @EJB
    DescriptionDAO descriptionDAO;

    @EJB
    AuthDAO authDAO;


    /**
     * Este método es responsable de crear un HelperTable Record a partir de un objeto JSON.
     *
     * @param rs El objeto JSON a partir del cual se crea el objeto. El formato JSON será:
     *                       <code>{"TableName":"helper_table_atc","records":[{"id":1,"codigo_atc":"atc1"}</code>
     *
     * @return Un objeto fresco de tipo <code>HelperTableRecord</code> creado a partir del objeto JSON.
     *
     * @throws IOException Arrojada si hay un problema.
     */
    public DescriptionType createDescriptionTypeFromResultSet(ResultSet rs) {

        DescriptionType descriptionType = new DescriptionType();

        try {
            descriptionType.setId(rs.getLong("id"));
            descriptionType.setName(rs.getString("name"));
            descriptionType.setDescription(rs.getString("description"));

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return descriptionType;

    }

    public Description createDescriptionFromResultSet(ResultSet resultSet, ConceptSMTK conceptSMTK, Map<Long, ConceptSMTK> conceptSMTKMap) throws SQLException {

        long id = resultSet.getLong("id");

        /*
         * Try y catch ignored porque no todas las funciones de la BD que recuperan Descriptions de la BD traen esta columna.
         * Ej: Usar la funcion semantikos.get_descriptions_by_idconcept para recueprar conceptos se cae con la excepcion:
         * org.postgresql.util.PSQLException: The column name uses was not found in this ResultSet.
         */
        String descriptionID = resultSet.getString("descid");
        long idDescriptionType = resultSet.getLong("id_description_type");
        String term = resultSet.getString("term");
        boolean isCaseSensitive = resultSet.getBoolean("case_sensitive");
        boolean isAutoGenerated = resultSet.getBoolean("autogenerated_name");
        boolean isPublished = resultSet.getBoolean("is_published");
        boolean isModeled = resultSet.getBoolean("is_modeled");
        Timestamp validityUntil = resultSet.getTimestamp("validity_until");
        Timestamp creationDate = resultSet.getTimestamp("creation_date");
        long uses = resultSet.getLong("uses");

        long idUser = resultSet.getLong("id_user");

        User user = UserFactory.getInstance().findUserById(idUser);//authDAO.getUserById();

        long idConcept = resultSet.getLong("id_concept");

        ConceptSMTK conceptByID = null;

        if (conceptSMTK == null) {
            if(conceptSMTKMap.containsKey(idConcept)) {
                conceptByID = conceptSMTKMap.get(idConcept);
            }
            else {
                conceptByID = conceptDAO.getConceptByID(idConcept);
                conceptSMTKMap.put(idConcept, conceptByID);
            }
        } else {
            conceptByID = conceptSMTK;
        }

        DescriptionType descriptionType = DescriptionTypeFactory.getInstance().getDescriptionTypeByID(idDescriptionType);
        Description description = new Description(id, conceptByID, descriptionID, descriptionType, term, uses,
                isCaseSensitive, isAutoGenerated, isPublished,
                validityUntil, creationDate, user, isModeled);

        return description;
    }

    public NoValidDescription createNoValidDescriptionFromResultSet(ResultSet resultSet, ConceptSMTK conceptSMTK) throws SQLException {

        long id = resultSet.getLong("id");
        String descriptionID = resultSet.getString("description_id");
        long idDescriptionType = resultSet.getLong("id_description_type");
        String term = resultSet.getString("term");
        boolean isCaseSensitive = resultSet.getBoolean("case_sensitive");
        boolean isAutoGenerated = resultSet.getBoolean("autogenerated");
        boolean isPublished = resultSet.getBoolean("is_published");
        boolean isModeled = resultSet.getBoolean("is_modeled");
        Timestamp validityUntil = resultSet.getTimestamp("validity_until");
        Timestamp creationDate = resultSet.getTimestamp("creation_date");
        long uses = resultSet.getLong("uses");

        User user = authDAO.getUserById(resultSet.getLong("id_user"));

        long idConcept = resultSet.getLong("id_concept");

        ConceptSMTK conceptByID;
        if (conceptSMTK == null) {
            conceptByID = conceptDAO.getConceptByID(idConcept);
        } else {
            conceptByID = conceptSMTK;
        }

        DescriptionType descriptionType = DescriptionTypeFactory.getInstance().getDescriptionTypeByID(idDescriptionType);
        Description description = new Description(id, conceptByID, descriptionID, descriptionType, term, 0, isCaseSensitive, isAutoGenerated, isPublished, validityUntil, creationDate, user, isModeled);
        description.setUses(uses);
        ObservationNoValid observationNoValid = descriptionDAO.getObservationNoValidBy(description);
        List<ConceptSMTK> suggestedConcepts = descriptionDAO.getSuggestedConceptsBy(description);
        return new NoValidDescription(description, observationNoValid, suggestedConcepts);
    }
}
